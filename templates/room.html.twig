{% extends 'base.html.twig' %}

{% block title %}Učebna {{ room.getFullName() }}{% endblock %}

{% block content %}
    <h1>Učebna {{ room.getFullName() }}</h1>
    <div class="form-block">
        <section class="info">
            <span>Budova:</span>
            <span>{{ room.building }}</span>

            <span>Místnost:</span>
            <span>{{ room.name }}</span>

            <span>Stav:</span>
            <span>{% if is_occupied %}Obsazená{% else %}Volná{% endif %}</span>

            <span>Dostupnost</span>
            <span>
                {% if room.isPublic %}
                    Veřejná
                {% else %}
                    Soukromá
                    {% if room.group %}
                        (spravuje {{ room.group.name }})
                    {% endif %}
                {% endif %}
            </span>

            <span>Mám přístup?</span>
            <span>{% if is_bookable %}Ano{% else %}Ne{% endif %}</span>

            {% if is_bookable or is_granted('ROLE_ADMIN') %}
                <span>Rezervace</span>
                <a href="{{ path('app_book', {'room': room.id}) }}">
                    Rezervovat{% if is_manageable or is_granted('ROLE_ADMIN') %} jako správce{% endif %}
                </a>
            {% endif %}
        </section>

        <div>
            <h3>Správci</h3>
            <table>
                <thead>
                <tr>
                    <th>Jméno</th>
                    {% if is_granted('ROLE_ADMIN') or is_group_manageable %}
                        <th><img class="fa" src="/images/trash-red.svg" alt="Odebrat správce"></th>
                    {% endif %}
                </tr>
                </thead>
                <tbody id="managers-table-body">
                {% if room.managers is empty %}
                    <tr>
                        <td colSpan="2">Žádný správce</td>
                    </tr>
                {% endif %}
                {% for manager in room.managers %}
                    <tr id="manager-{{ manager.id }}">
                        <td>{{ manager.name }}</td>
                        {% if is_granted('ROLE_ADMIN') or is_group_manageable %}
                            <td>
                                <img class="wide a" src="/images/trash-red.svg" alt="Odebrat správce"
                                     onclick="deleteManagerFromRoom({{ room.id }}, '{{ room.name }}', {{ manager.id }}, '{{ manager.name }}')">
                            </td>
                        {% endif %}
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        </div>

        {% if is_granted('ROLE_ADMIN') %}
            <form action="{{ path('app_room_change_room', {'id': room.id}) }}" method="post">
                <h4>Změnit místnost</h4>
                <div class="form-fields">
                    <label for="room">Nová místnost:</label>
                    <input type="text" id="room" name="_room" required>
                </div>

                <button type="submit">Změnit místnost</button>
            </form>

            <form action="{{ path('app_room_change_building', {'id': room.id}) }}" method="post">
                <h4>Změnit budovu</h4>
                <div class="form-fields">
                    <label for="building">Nová budova</label>
                    <input type="text" id="building" name="_building" required>
                </div>

                <button type="submit">Změnit budovu</button>
            </form>

            <form action="{{ path('app_room_change_availability_for_the_public', {'id': room.id}) }}" method="post">
                <h4>Změnit přístupnost pro veřejnost</h4>
                <div class="form-fields">
                    <label for="is_public">Veřejná?</label>
                    <input type="checkbox" id="is_public" name="_is_public" {% if room.isPublic %}checked{% endif %}>
                </div>

                <button type="submit">Změnit přístupnost pro veřejnost</button>
            </form>
        {% endif %}
    </div>

    {% if is_granted('ROLE_ADMIN') or is_group_manageable %}
        <script>
            function reloadManagersTable(roomId, roomName) {
                const managersTableBody = document.getElementById('managers-table-body')

                fetch('/api/rooms/' + roomId + '/managers', {headers: {"Accept": "application/json"}})
                    .then(response => response.json())
                    .then(managers => {

                        managersTableBody.innerHTML = ''

                        if (managers.length === 0) {
                            const row = document.createElement('tr')
                            row.innerHTML = '<td colSpan="2">Žádný správce</td>'
                            managersTableBody.appendChild(row)
                        } else {
                            managers.forEach(manager => {
                                const row = document.createElement('tr')
                                row.innerHTML += `<td>${manager.name}</td>`
                                row.innerHTML += `<td>
                                                      <img class="wide a" src="/images/trash-red.svg" alt="Odebrat správce"
                                                           onclick="deleteManagerFromRoom(${roomId}, '${roomName}', ${manager.id}, '${manager.name}')">
                                                  </td>`
                                managersTableBody.appendChild(row)
                            })
                        }

                        // const row = document.createElement('tr')
                        // row.innerHTML = '<td colSpan="5"><a id="add-account-button" href="#">Přidat nový účet</a></td>'
                        // managersTableBody.appendChild(row)

                        // new Modal(
                        //     'new-account-modal',
                        //     ['add-account-button'],
                        //     ['close-new-account-modal-button', 'new-account-save-button']
                        // )

                    })
                // .then(r => addDeleteButtonListeners())
            }

            function deleteManagerFromRoom(roomId, roomName, managerId, managerName) {
                if (confirm(`Skutečně chcete odebrat uživateli ${managerName} správcovská práva pro učebnu ${roomName}?`)) {
                    fetch(`/api/rooms/${roomId}/managers/${managerId}`, {
                        method: 'DELETE',
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: {}
                    }).then(response => {
                        if (!response.ok) {
                            throw new Error(`Nepodařilo se odebrat uživateli ${managerName} správcovská práva pro učebnu ${roomName}: ${response.statusText}`);
                        }

                        if (response.status === 204) {
                            return null;
                        }

                        console.warn(`Špatný návratový kód: ${response.status}`);
                        return null;
                    }).then(_ => {
                        console.log(`Uživateli ${managerName} byla úspěšně odebrána správcovská práva pro učebnu ${roomName}.`);
                        reloadManagersTable(roomId, roomName)
                    }).catch(error => {
                        console.error(`Chyba při odebírání správcovských práv uživatele ${managerName} pro učebnu ${roomName}: ${error.message}`)
                    })
                }
            }

            document.addEventListener('DOMContentLoaded', () => {

                const addManagerButton = document.getElementById('new-manager-save-button')
                if (addManagerButton != null) {
                    addManagerButton.addEventListener('click', event => {
                        event.preventDefault()
                        const userId = document.getElementById('account-table-body').dataset.userId
                        const addAccountForm = document.getElementById('new-account-form')
                        const accountData = new FormData(addAccountForm)
                        const account = {
                            'name': accountData.get('name'),
                            'type': accountData.get('type'),
                            'valid_until': `${accountData.get('year')}-${accountData.get('month')}-${accountData.get('day')}`
                        }
                        createAccount(userId, account)
                            .then(() => reloadAccountTable())
                    })
                }

                new SearchBar('searchbar', 'searchbar-button', 'searchbar-results')
            })
        </script>
    {% endif %}
{% endblock %}
